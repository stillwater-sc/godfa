package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Constraint constraint
// swagger:model constraint
type Constraint struct {

	// dimension
	Dimension int64 `json:"dimension,omitempty"`

	// rhs
	RHS float64 `json:"rhs,omitempty"`

	// vector
	Vector []Value `json:"vector"`
}

// Validate validates this constraint
func (m *Constraint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDimension(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVector(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var constraintTypeDimensionPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[1,2,3]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		constraintTypeDimensionPropEnum = append(constraintTypeDimensionPropEnum, v)
	}
}

// prop value enum
func (m *Constraint) validateDimensionEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, constraintTypeDimensionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Constraint) validateDimension(formats strfmt.Registry) error {

	if swag.IsZero(m.Dimension) { // not required
		return nil
	}

	// value enum
	if err := m.validateDimensionEnum("dimension", "body", m.Dimension); err != nil {
		return err
	}

	return nil
}

func (m *Constraint) validateVector(formats strfmt.Registry) error {

	if swag.IsZero(m.Vector) { // not required
		return nil
	}

	for i := 0; i < len(m.Vector); i++ {

		if err := m.Vector[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vector" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}
